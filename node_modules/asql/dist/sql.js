"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.minmax = exports.$escape = exports.$sql = exports.$if = exports.sql = void 0;
const pg_args_1 = require("./pg-args");
const entity_1 = require("./entity");
const sql = (clauses, ...exps) => {
    const pgArgs = pg_args_1.createPgArgs();
    const sql = _sql(pgArgs)(clauses, ...exps);
    return [sql, pgArgs.args()];
};
exports.sql = sql;
const $if = (condition, ...tt) => {
    const flat = () => tt.flat();
    if (Array.isArray(condition)) {
        return flat;
    }
    else if (condition) {
        return flat;
    }
    return () => [
        [''],
        [],
    ];
};
exports.$if = $if;
const $sql = (clauses, ...exps) => [clauses, exps];
exports.$sql = $sql;
const $escape = (v) => new entity_1.Escape(v);
exports.$escape = $escape;
const minmax = (column, v, o) => new entity_1.NullableMinMax(column, v, o);
exports.minmax = minmax;
function _sql({ add, args }) {
    return (clauses, ...exps) => clauses
        .reduce((cc, c, i) => {
        const v = exps[i - 1];
        if (typeof v === 'function') {
            const [subClauses, subArgs] = v();
            return cc + _sql({ add, args: subArgs })(subClauses, ...subArgs) + c;
        }
        if (v instanceof entity_1.Escape) {
            return cc + v.get() + c;
        }
        if (Array.isArray(v)) {
            return cc + _arrayArgs(add, v) + c;
        }
        if (v instanceof entity_1.MinMax) {
            return `${cc}numrange(${v.min},${v.max})`;
        }
        if (v instanceof entity_1.NullableMinMax) {
            return cc + v.get(add);
        }
        return cc + add(v) + c;
    })
        .split('\n')
        .filter(Boolean)
        .join('\n');
}
function _arrayArgs(add, v) {
    if (v.length > 0) {
        return v.map(vv => {
            if (Array.isArray(vv)) {
                return '(' + _arrayArgs(add, vv) + ')';
            }
            return add(vv);
        });
    }
    else {
        return 'NULL';
    }
}
